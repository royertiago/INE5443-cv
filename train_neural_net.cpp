/* This program reads the list of filenames generated by genimg.sh
 * and trains a neural net.
 */
#include <stdexcept>
#include <string>
#include <vector>
#include <iostream>
#include <opencv2/highgui/highgui.hpp>
#include <fann.h>
#include <fann_cpp.h>

std::vector<float> read_pixels( std::string filename ) {
    cv::Mat_<float> img = cv::imread( filename, CV_LOAD_IMAGE_GRAYSCALE );

    if( ! img.data )
        throw std::runtime_error("Error reading file " + filename);

    std::vector<float> ret(img.begin(), img.end());
    for( auto & f : ret )
        f = f/255;

    return ret;
}

int main() {
    std::string filename;
    std::vector< std::vector<float> > input_holder;
    std::vector< std::vector<float> > output_holder;

    // Read dog clusters
    while( std::getline( std::cin, filename ) ) {
        if( filename == "" ) break;
        input_holder.push_back( read_pixels(filename) );
        output_holder.push_back( std::vector<float>{1.0, 0.0} );
    }

    // Read human clusters
    while( std::getline( std::cin, filename ) ) {
        if( filename == "" ) break;
        input_holder.push_back( read_pixels(filename) );
        output_holder.push_back( std::vector<float>{0.0, 1.0} );
    }

    // Read "nothing" clusters
    while( std::getline( std::cin, filename ) ) {
        input_holder.push_back( read_pixels(filename) );
        output_holder.push_back( std::vector<float>{0.0, 0.0} );
    }

    std::vector< float * > input;
    std::vector< float * > output;
    for( int i = 0; i < input_holder.size(); i++ ) {
        input.push_back( input_holder[i].data() );
        output.push_back( output_holder[i].data() );
    }


    FANN::neural_net nn;

    nn.create_standard(
        3,
        (unsigned) input_holder[0].size(),
        20, // hidden neurons - 20 should be enough.
        (unsigned) 2
    );

    FANN::training_data data;
    data.set_train_data(
        input.size(),
        input_holder[0].size(),
        input.data(),
        output_holder[0].size(),
        output.data()
    );

    nn.set_activation_function_output( FANN::SIGMOID );
    nn.set_activation_function_hidden( FANN::SIGMOID );
    nn.train_on_data(
        data,
        1000, // max_epochs
        100, // epochs_between_reports
        1e-2 // desired error
    );

    nn.save( "neural.net" );
}
